//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace AssemblyCSharp
{
	public class AtomConnection
	{
		public PDB_mesh[] molecules;
		public int[] atomIds;
		public bool isActive;
		public AtomConnection()
		{
			molecules = new PDB_mesh[2] ;
			atomIds = new int[2] ;
			isActive = false;
		}

		public AtomConnection (PDB_mesh mol1,PDB_mesh mol2, int at1, int at2)
		{
			molecules = new PDB_mesh[2] {mol1, mol2};
			atomIds = new int[2] {at1, at2};
			isActive = false;
		}

		virtual public void Update()
		{}
		virtual public void Draw()
		{}
	}

	public class Grappel:AtomConnection
	{
		float force;
		float minDistance;
		public Grappel(PDB_mesh mol1,PDB_mesh mol2, int at1, int at2): base(mol1,mol2,at1,at2)
		{
			force = 1;
			minDistance = 2;

		}
		public Grappel()
		{
			force = 1;
			minDistance = 10;
		}

		public override void Update()
		{
			if (isActive) {
				int atomIndex1 = atomIds [0];
				int atomIndex2 = atomIds [1];
				Vector3 worldAtomPos1 = molecules [0].transform.TransformPoint (molecules [0].mol.atom_centres [atomIndex1]);
				Vector3 worldAtomPos2 = molecules [1].transform.TransformPoint (molecules [1].mol.atom_centres [atomIndex2]);

				Vector3 dir1to2 = worldAtomPos2 - worldAtomPos1;
				if (dir1to2.sqrMagnitude < minDistance * minDistance) {
					return;
				}
				Vector3 dir2to1 = worldAtomPos1 - worldAtomPos2;

				Rigidbody mol1_rb = molecules [0].GetComponent<Rigidbody> ();
				Rigidbody mol2_rb = molecules [1].GetComponent<Rigidbody> ();

				mol1_rb.AddForceAtPosition (dir1to2.normalized * force, worldAtomPos1);
				mol2_rb.AddForceAtPosition (dir2to1.normalized * force, worldAtomPos2);
			}
		}
		public override void Draw()
		{
			if (isActive) {
				int atomIndex1 = atomIds [0];
				int atomIndex2 = atomIds [1];
				Vector3 worldAtomPos1 = molecules [0].transform.TransformPoint (molecules [0].mol.atom_centres [atomIndex1]);
				Vector3 worldAtomPos2 = molecules [1].transform.TransformPoint (molecules [1].mol.atom_centres [atomIndex2]);

				Debug.DrawLine(worldAtomPos1,worldAtomPos2);
			
			}
		}
	}
}


