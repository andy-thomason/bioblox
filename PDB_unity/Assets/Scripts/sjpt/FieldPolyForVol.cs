// #define GEN // uncomment this to generate bmpolys from mc_triangles
// With no defined GEN we will use the precomputed bmpolys
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using UnityEngine;
using qbyte = System.Byte;

/// initially part of CSGFIELD rather than pure CSG;
/// but it turned out to be good for non-axially aligned planes as well.
/// The only method externalized from here is "Poly CSGPrim.PolyForVolField(Volume)"
/// which returns the set of Polys for the primitive surface on the volume.
///
/// This had two implementations to derive marching cubes order,
/// but neither worked reliably.
/// So we have lifted the precomputed working version (mc_triangles) of the from MarchingCubes.cs
/// and regenerated that (see makepolys() below) to create appropriate polygon structures (bmpolys).
///

namespace CSG {
    public partial class CSGPrim {

        // derived from MarchingCubes, from 
        qbyte[,] edges = new qbyte[,] {
            { 0,1 }, 
            { 1,2 },
            { 2,3 },
            { 3,0 },
            { 4,5 },
            { 5,6 },
            { 6,7 },
            { 7,4 },
            { 0,4 },
            { 1,5 },
            { 2,6 },
            { 3,7 }
        };

#if GEN
#else 
        private static qbyte[][][] I3(params qbyte[][][] piii) {  return piii; }
        private static qbyte[][] I2(params qbyte[][] pii) { return pii; }
        private static qbyte[] I(params qbyte[] pi) { return pi; }


        qbyte[][][] bmpolys = I3(I2(),
I2(I(0, 8, 3)),
I2(I(0, 1, 9)),
I2(I(8, 3, 1, 9)),
I2(I(1, 2, 10)),
I2(I(0, 8, 3), I(1, 2, 10)),
I2(I(2, 10, 9, 0)),
I2(I(8, 3, 2, 10, 9)),
I2(I(3, 11, 2)),
I2(I(11, 2, 0, 8)),
I2(I(1, 9, 0), I(2, 3, 11)),
I2(I(11, 2, 1, 9, 8)),
I2(I(10, 1, 3, 11)),
I2(I(10, 1, 0, 8, 11)),
I2(I(9, 0, 3, 11, 10)),
I2(I(9, 8, 11, 10)),
I2(I(4, 7, 8)),
I2(I(3, 0, 4, 7)),
I2(I(0, 1, 9), I(8, 4, 7)),
I2(I(1, 9, 4, 7, 3)),
I2(I(1, 2, 10), I(8, 4, 7)),
I2(I(4, 7, 3, 0), I(1, 2, 10)),
I2(I(2, 10, 9, 0), I(8, 4, 7)),
I2(I(2, 10, 9, 4, 7, 3)),
I2(I(8, 4, 7), I(3, 11, 2)),
I2(I(4, 7, 11, 2, 0)),
I2(I(9, 0, 1), I(8, 4, 7), I(2, 3, 11)),
I2(I(4, 7, 11, 2, 1, 9)),
I2(I(10, 1, 3, 11), I(7, 8, 4)),
I2(I(11, 10, 1, 0, 4, 7)),
I2(I(4, 7, 8), I(9, 0, 3, 11, 10)),
I2(I(4, 7, 11, 10, 9)),
I2(I(9, 5, 4)),
I2(I(9, 5, 4), I(0, 8, 3)),
I2(I(5, 4, 0, 1)),
I2(I(5, 4, 8, 3, 1)),
I2(I(1, 2, 10), I(9, 5, 4)),
I2(I(3, 0, 8), I(1, 2, 10), I(4, 9, 5)),
I2(I(2, 10, 5, 4, 0)),
I2(I(2, 10, 5, 4, 8, 3)),
I2(I(9, 5, 4), I(2, 3, 11)),
I2(I(11, 2, 0, 8), I(4, 9, 5)),
I2(I(5, 4, 0, 1), I(2, 3, 11)),
I2(I(2, 1, 5, 4, 8, 11)),
I2(I(3, 11, 10, 1), I(9, 5, 4)),
I2(I(4, 9, 5), I(0, 8, 11, 10, 1)),
I2(I(5, 4, 0, 3, 11, 10)),
I2(I(5, 4, 8, 11, 10)),
I2(I(7, 8, 9, 5)),
I2(I(3, 0, 9, 5, 7)),
I2(I(7, 8, 0, 1, 5)),
I2(I(1, 5, 7, 3)),
I2(I(7, 8, 9, 5), I(10, 1, 2)),
I2(I(10, 1, 2), I(9, 5, 7, 3, 0)),
I2(I(8, 0, 2, 10, 5, 7)),
I2(I(2, 10, 5, 7, 3)),
I2(I(9, 5, 7, 8), I(3, 11, 2)),
I2(I(9, 5, 7, 11, 2, 0)),
I2(I(2, 3, 11), I(0, 1, 5, 7, 8)),
I2(I(11, 2, 1, 5, 7)),
I2(I(9, 5, 7, 8), I(10, 1, 3, 11)),
I2(I(5, 7, 11, 10, 1, 0, 9)),
I2(I(11, 10, 5, 7, 8, 0, 3)),
I2(I(11, 10, 5, 7)),
I2(I(10, 6, 5)),
I2(I(0, 8, 3), I(5, 10, 6)),
I2(I(9, 0, 1), I(5, 10, 6)),
I2(I(8, 3, 1, 9), I(5, 10, 6)),
I2(I(6, 5, 1, 2)),
I2(I(6, 5, 1, 2), I(3, 0, 8)),
I2(I(6, 5, 9, 0, 2)),
I2(I(5, 9, 8, 3, 2, 6)),
I2(I(2, 3, 11), I(10, 6, 5)),
I2(I(0, 8, 11, 2), I(10, 6, 5)),
I2(I(0, 1, 9), I(2, 3, 11), I(5, 10, 6)),
I2(I(5, 10, 6), I(1, 9, 8, 11, 2)),
I2(I(3, 11, 6, 5, 1)),
I2(I(0, 8, 11, 6, 5, 1)),
I2(I(3, 11, 6, 5, 9, 0)),
I2(I(6, 5, 9, 8, 11)),
I2(I(5, 10, 6), I(4, 7, 8)),
I2(I(3, 0, 4, 7), I(6, 5, 10)),
I2(I(1, 9, 0), I(5, 10, 6), I(8, 4, 7)),
I2(I(10, 6, 5), I(1, 9, 4, 7, 3)),
I2(I(1, 2, 6, 5), I(4, 7, 8)),
I2(I(1, 2, 6, 5), I(3, 0, 4, 7)),
I2(I(8, 4, 7), I(9, 0, 2, 6, 5)),
I2(I(7, 3, 2, 6, 5, 9, 4)),
I2(I(3, 11, 2), I(7, 8, 4), I(10, 6, 5)),
I2(I(5, 10, 6), I(4, 7, 11, 2, 0)),
I2(I(0, 1, 9), I(4, 7, 8), I(2, 3, 11), I(5, 10, 6)),
I2(I(2, 1, 9, 4, 7, 11), I(5, 10, 6)),
I2(I(8, 4, 7), I(3, 11, 6, 5, 1)),
I2(I(5, 1, 0, 4, 7, 11, 6)),
I2(I(5, 9, 0, 3, 11, 6), I(8, 4, 7)),
I2(I(6, 5, 9, 4, 7, 11)),
I2(I(4, 9, 10, 6)),
I2(I(10, 6, 4, 9), I(0, 8, 3)),
I2(I(0, 1, 10, 6, 4)),
I2(I(8, 3, 1, 10, 6, 4)),
I2(I(4, 9, 1, 2, 6)),
I2(I(3, 0, 8), I(1, 2, 6, 4, 9)),
I2(I(0, 2, 6, 4)),
I2(I(8, 3, 2, 6, 4)),
I2(I(4, 9, 10, 6), I(11, 2, 3)),
I2(I(0, 8, 11, 2), I(4, 9, 10, 6)),
I2(I(3, 11, 2), I(0, 1, 10, 6, 4)),
I2(I(6, 4, 8, 11, 2, 1, 10)),
I2(I(6, 4, 9, 1, 3, 11)),
I2(I(8, 11, 6, 4, 9, 1, 0)),
I2(I(3, 11, 6, 4, 0)),
I2(I(6, 4, 8, 11)),
I2(I(10, 6, 7, 8, 9)),
I2(I(7, 3, 0, 9, 10, 6)),
I2(I(10, 6, 7, 8, 0, 1)),
I2(I(10, 6, 7, 3, 1)),
I2(I(1, 2, 6, 7, 8, 9)),
I2(I(2, 6, 7, 3, 0, 9, 1)),
I2(I(7, 8, 0, 2, 6)),
I2(I(7, 3, 2, 6)),
I2(I(2, 3, 11), I(10, 6, 7, 8, 9)),
I2(I(2, 0, 9, 10, 6, 7, 11)),
I2(I(8, 0, 1, 10, 6, 7), I(2, 3, 11)),
I2(I(11, 2, 1, 10, 6, 7)),
I2(I(8, 9, 1, 3, 11, 6, 7)),
I2(I(0, 9, 1), I(11, 6, 7)),
I2(I(7, 8, 0, 3, 11, 6)),
I2(I(7, 11, 6)),
I2(I(7, 6, 11)),
I2(I(3, 0, 8), I(11, 7, 6)),
I2(I(0, 1, 9), I(11, 7, 6)),
I2(I(1, 9, 8, 3), I(11, 7, 6)),
I2(I(10, 1, 2), I(6, 11, 7)),
I2(I(1, 2, 10), I(3, 0, 8), I(6, 11, 7)),
I2(I(9, 0, 2, 10), I(6, 11, 7)),
I2(I(6, 11, 7), I(2, 10, 9, 8, 3)),
I2(I(2, 3, 7, 6)),
I2(I(0, 8, 7, 6, 2)),
I2(I(7, 6, 2, 3), I(0, 1, 9)),
I2(I(6, 2, 1, 9, 8, 7)),
I2(I(7, 6, 10, 1, 3)),
I2(I(7, 6, 10, 1, 0, 8)),
I2(I(0, 3, 7, 6, 10, 9)),
I2(I(7, 6, 10, 9, 8)),
I2(I(8, 4, 6, 11)),
I2(I(6, 11, 3, 0, 4)),
I2(I(6, 11, 8, 4), I(9, 0, 1)),
I2(I(9, 4, 6, 11, 3, 1)),
I2(I(8, 4, 6, 11), I(2, 10, 1)),
I2(I(1, 2, 10), I(3, 0, 4, 6, 11)),
I2(I(11, 8, 4, 6), I(0, 2, 10, 9)),
I2(I(10, 9, 4, 6, 11, 3, 2)),
I2(I(2, 3, 8, 4, 6)),
I2(I(0, 4, 6, 2)),
I2(I(1, 9, 0), I(2, 3, 8, 4, 6)),
I2(I(1, 9, 4, 6, 2)),
I2(I(1, 3, 8, 4, 6, 10)),
I2(I(10, 1, 0, 4, 6)),
I2(I(4, 6, 10, 9, 0, 3, 8)),
I2(I(10, 9, 4, 6)),
I2(I(4, 9, 5), I(7, 6, 11)),
I2(I(0, 8, 3), I(4, 9, 5), I(11, 7, 6)),
I2(I(0, 1, 5, 4), I(7, 6, 11)),
I2(I(11, 7, 6), I(8, 3, 1, 5, 4)),
I2(I(9, 5, 4), I(10, 1, 2), I(7, 6, 11)),
I2(I(6, 11, 7), I(1, 2, 10), I(0, 8, 3), I(4, 9, 5)),
I2(I(7, 6, 11), I(5, 4, 0, 2, 10)),
I2(I(4, 8, 3, 2, 10, 5), I(11, 7, 6)),
I2(I(2, 3, 7, 6), I(5, 4, 9)),
I2(I(9, 5, 4), I(0, 8, 7, 6, 2)),
I2(I(6, 2, 3, 7), I(1, 5, 4, 0)),
I2(I(6, 2, 1, 5, 4, 8, 7)),
I2(I(9, 5, 4), I(10, 1, 3, 7, 6)),
I2(I(6, 10, 1, 0, 8, 7), I(9, 5, 4)),
I2(I(4, 0, 3, 7, 6, 10, 5)),
I2(I(7, 6, 10, 5, 4, 8)),
I2(I(9, 5, 6, 11, 8)),
I2(I(6, 11, 3, 0, 9, 5)),
I2(I(11, 8, 0, 1, 5, 6)),
I2(I(6, 11, 3, 1, 5)),
I2(I(1, 2, 10), I(9, 5, 6, 11, 8)),
I2(I(11, 3, 0, 9, 5, 6), I(1, 2, 10)),
I2(I(11, 8, 0, 2, 10, 5, 6)),
I2(I(6, 11, 3, 2, 10, 5)),
I2(I(8, 9, 5, 6, 2, 3)),
I2(I(9, 5, 6, 2, 0)),
I2(I(1, 5, 6, 2, 3, 8, 0)),
I2(I(1, 5, 6, 2)),
I2(I(1, 3, 8, 9, 5, 6, 10)),
I2(I(10, 1, 0, 9, 5, 6)),
I2(I(0, 3, 8), I(5, 6, 10)),
I2(I(10, 5, 6)),
I2(I(5, 10, 11, 7)),
I2(I(5, 10, 11, 7), I(8, 3, 0)),
I2(I(11, 7, 5, 10), I(1, 9, 0)),
I2(I(7, 5, 10, 11), I(9, 8, 3, 1)),
I2(I(1, 2, 11, 7, 5)),
I2(I(0, 8, 3), I(1, 2, 11, 7, 5)),
I2(I(7, 5, 9, 0, 2, 11)),
I2(I(7, 5, 9, 8, 3, 2, 11)),
I2(I(5, 10, 2, 3, 7)),
I2(I(2, 0, 8, 7, 5, 10)),
I2(I(9, 0, 1), I(5, 10, 2, 3, 7)),
I2(I(9, 8, 7, 5, 10, 2, 1)),
I2(I(1, 3, 7, 5)),
I2(I(0, 8, 7, 5, 1)),
I2(I(9, 0, 3, 7, 5)),
I2(I(9, 8, 7, 5)),
I2(I(8, 4, 5, 10, 11)),
I2(I(0, 4, 5, 10, 11, 3)),
I2(I(0, 1, 9), I(8, 4, 5, 10, 11)),
I2(I(10, 11, 3, 1, 9, 4, 5)),
I2(I(5, 1, 2, 11, 8, 4)),
I2(I(0, 4, 5, 1, 2, 11, 3)),
I2(I(0, 2, 11, 8, 4, 5, 9)),
I2(I(9, 4, 5), I(2, 11, 3)),
I2(I(5, 10, 2, 3, 8, 4)),
I2(I(5, 10, 2, 0, 4)),
I2(I(10, 2, 3, 8, 4, 5), I(0, 1, 9)),
I2(I(5, 10, 2, 1, 9, 4)),
I2(I(8, 4, 5, 1, 3)),
I2(I(0, 4, 5, 1)),
I2(I(8, 4, 5, 9, 0, 3)),
I2(I(9, 4, 5)),
I2(I(11, 7, 4, 9, 10)),
I2(I(0, 8, 3), I(4, 9, 10, 11, 7)),
I2(I(1, 10, 11, 7, 4, 0)),
I2(I(3, 1, 10, 11, 7, 4, 8)),
I2(I(11, 7, 4, 9, 1, 2)),
I2(I(7, 4, 9, 1, 2, 11), I(0, 8, 3)),
I2(I(11, 7, 4, 0, 2)),
I2(I(11, 7, 4, 8, 3, 2)),
I2(I(9, 10, 2, 3, 7, 4)),
I2(I(9, 10, 2, 0, 8, 7, 4)),
I2(I(3, 7, 4, 0, 1, 10, 2)),
I2(I(1, 10, 2), I(8, 7, 4)),
I2(I(4, 9, 1, 3, 7)),
I2(I(4, 9, 1, 0, 8, 7)),
I2(I(4, 0, 3, 7)),
I2(I(4, 8, 7)),
I2(I(9, 10, 11, 8)),
I2(I(3, 0, 9, 10, 11)),
I2(I(0, 1, 10, 11, 8)),
I2(I(3, 1, 10, 11)),
I2(I(1, 2, 11, 8, 9)),
I2(I(3, 0, 9, 1, 2, 11)),
I2(I(0, 2, 11, 8)),
I2(I(3, 2, 11)),
I2(I(2, 3, 8, 9, 10)),
I2(I(9, 10, 2, 0)),
I2(I(2, 3, 8, 0, 1, 10)),
I2(I(1, 10, 2)),
I2(I(1, 3, 8, 9)),
I2(I(0, 9, 1)),
I2(I(0, 3, 8)),
I2());
#endif

        public static bool oldFieldPoly = false;
        //// public static float gradCompPow = -2;
        protected Poly PolyForVolField(Volume vol) {
            //// float gradcomp = Mathf.Pow(10, gradCompPow);
            // This reproduced the vertex order of Paul Bourke's (borrowed) table.
            //
            //     7 6   y   z
            // 3 2 4 5   | /
            // 0 1       0 - x
            //

            Vector3[] points = new Vector3[8];
            points[0] = new Vector3(vol.x1, vol.y1, vol.z1);
            points[1] = new Vector3(vol.x2, vol.y1, vol.z1);
            points[3] = new Vector3(vol.x1, vol.y2, vol.z1);
            points[2] = new Vector3(vol.x2, vol.y2, vol.z1);
            points[4] = new Vector3(vol.x1, vol.y1, vol.z2);
            points[5] = new Vector3(vol.x2, vol.y1, vol.z2);
            points[7] = new Vector3(vol.x1, vol.y2, vol.z2);
            points[6] = new Vector3(vol.x2, vol.y2, vol.z2);

            float[] vv = new float[8];  // vertex values

            // bm summarizes the 'topology' of this fit
            int bm = 0;
            int k = 1;  // bitmap val and val for each pos
            bool[] sign = new bool[8];
            for (int v = 0; v < 8; v++) {
                vv[v] = Dist(points[v]);
                if (vv[v] == 0)
                    vv[v] = delta;
                sign[v] = vv[v] > 0;
                if (sign[v])
                    bm += k;
                k *= 2;
            }

            int i = bm * 16;
            qbyte[][] polys = bmpolys[bm];

            Poly mainpoly = null;
            foreach (qbyte[] ipoly in polys) {  // ipoly in polys
                Poly poly = Poly.Make();
                if (mainpoly == null)
                    mainpoly = poly;
                else {
                    if (mainpoly.extraPolys == null)
                        mainpoly.extraPolys = new List<Poly>();
                    mainpoly.extraPolys.Add(poly);
                }
                foreach(int e in ipoly) {
                    int v0 = edges[e, 0], v1 = edges[e, 1];  // vertex indices
                    // GUIBits.LogC(" {0} {1}..{2}", e, v0, v1);
                    Vector3 xing = (points[v0] * vv[v1] - points[v1] * vv[v0]) / (vv[v1] - vv[v0]);
                    /* * experiment with refining point did not really help much
                    if (csg is CSGFIELD.CSGFMETA) {
                        CSGFIELD.CSGFMETA meta = (CSGFIELD.CSGFMETA)csg;
                        float dd = meta.Dist(xing);
                        Vector3 grad = meta.grad(xing);
                        if (grad.sqrMagnitude > gradcomp)
                            xing -= dd * grad / (grad.sqrMagnitude);
                        float dd2 = meta.Dist(xing);
                        float r = dd - dd2;
                    }
                    ** */

                    poly.Add(xing);
                }
            }    // ipoly in polys
            return mainpoly;
        }  // end PolyForVolField

#if GEN
        // poly points will be computed on demand for the bit pattern of +ve and -ve vertices
        // it holds polyPoints[bitpattern][polynum][pointWithinPolyNum]
        //
        // marching cubes edge lists
        // This reproduced the vertex order of Paul Bourke's (borrowed) table.
        // The indices in edge_indices have the following offsets.
        //
        //     7 6   y   z
        // 3 2 4 5   | /
        // 0 1       0 - x
        //

        static readonly qbyte[] mc_triangles = new qbyte[]{
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1,
        3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1,
        3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1,
        3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1,
        9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1,
        9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
        2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1,
        8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1,
        9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
        4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1,
        3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1,
        1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1,
        4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1,
        4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1,
        9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
        5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1,
        2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1,
        9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1,
        0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1,
        2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1,
        10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1,
        4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1,
        5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1,
        5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1,
        9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1,
        0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1,
        1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1,
        10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1,
        8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1,
        2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1,
        7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1,
        9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1,
        2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1,
        11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1,
        9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1,
        5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1,
        11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1,
        11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
        1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1,
        9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1,
        5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1,
        2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1,
        5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1,
        6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1,
        3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1,
        6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1,
        5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1,
        1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1,
        10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1,
        6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1,
        8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1,
        7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1,
        3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1,
        5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1,
        0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1,
        9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1,
        8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1,
        5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1,
        0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1,
        6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1,
        10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1,
        10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1,
        8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1,
        1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1,
        3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1,
        0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1,
        10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1,
        3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1,
        6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1,
        9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1,
        8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1,
        3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1,
        6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1,
        0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1,
        10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1,
        10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1,
        2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1,
        7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1,
        7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1,
        2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1,
        1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1,
        11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1,
        8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1,
        0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1,
        7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
        10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
        2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1,
        6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1,
        7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1,
        2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1,
        1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1,
        10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1,
        10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1,
        0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1,
        7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1,
        6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1,
        8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1,
        9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1,
        6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1,
        4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1,
        10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1,
        8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1,
        0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1,
        1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1,
        8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1,
        10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1,
        4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1,
        10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1,
        5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
        11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1,
        9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1,
        6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1,
        7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1,
        3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1,
        7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1,
        9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1,
        3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1,
        6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1,
        9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1,
        1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1,
        4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1,
        7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1,
        6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1,
        3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1,
        0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1,
        6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1,
        0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1,
        11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1,
        6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1,
        5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1,
        9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1,
        1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1,
        1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1,
        10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1,
        0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1,
        5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1,
        10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1,
        11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1,
        9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1,
        7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1,
        2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1,
        8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1,
        9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1,
        9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1,
        1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1,
        9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1,
        9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1,
        5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1,
        0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1,
        10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1,
        2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1,
        0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1,
        0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1,
        9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1,
        5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1,
        3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1,
        5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1,
        8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1,
        0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1,
        9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1,
        0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1,
        1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1,
        3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1,
        4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1,
        9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1,
        11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1,
        11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1,
        2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1,
        9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1,
        3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1,
        1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1,
        4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1,
        4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1,
        0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1,
        3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1,
        3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1,
        0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1,
        9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1,
        1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
        struct IPair { internal int x; internal int y; internal IPair(int x, int y) { this.x = x; this.y = y; } }

        public static int[][][] bmpolys;
        /** reformat mc_triangles into polygons */
        static CSGPrim() {
            makepolys();
        }
        public static string makepolys() {
            // string.Join(",", sss.ToArray());
            int k = 0;
            qbyte[] t = mc_triangles;
            bmpolys = new int[256][][];
            List<string> sss = new List<string>();

            for (int bm = 0; bm < 256; bm++) {
                // find true pairs
                List<IPair> pairs = new List<IPair>();
                int start = bm * 16; int end = bm * 16 + 15;
                for (int i = start; i < end; i += 3) {
                    if (t[i] == -1) break;
                    for (int j = i; j < i + 3; j++) {
                        int e1 = t[j];
                        int j1 = j == i + 2 ? i : j + 1;
                        int e2 = t[j1];
                        int back = -1;
                        for (int l = 0; l < pairs.Count; l++) if (pairs[l].x == e2 && pairs[l].y == e1) back = l;
                        if (back != -1)
                            pairs.RemoveAt(back);
                        else
                            pairs.Add(new IPair(e1, e2));
                    } // end j
                } // end i

                List<int[]> polys = new List<int[]>();
                List<string> ss = new List<string>();

                // turn them into polys
                while (pairs.Any()) {
                    List<int> poly = new List<int>();
                    List<string> s = new List<string>();

                    IPair pair = pairs.First();
                    poly.Add(pair.x); s.Add(pair.x + "");
                    poly.Add(pair.y); s.Add(pair.y + "");
                    pairs.Remove(pair);
                    while(true) {
                        if (k++ > 9999) { GUIBits.Log("failed init"); return "";  }

                        pair.x = -999;
                        foreach(var tpair in pairs) {
                            if (tpair.x == poly.Last()) {
                                pair = tpair;
                                break;
                            }
                        }  // search for next pair
                        pairs.Remove(pair);
                        if (pair.y == poly.First())
                            break;
                        poly.Add(pair.y); s.Add(pair.y + "");
                        
                    }
                    polys.Add(poly.ToArray());
                    ss.Add("I(" + string.Join(", ", s.ToArray()) + ")");
                }
                bmpolys[bm] = polys.ToArray();
                sss.Add("I2(" + string.Join(", ", ss.ToArray()) + ")");

            } // end bm
            string r = "bmpolys = I3(" + string.Join(",\n", sss.ToArray()) + ");\n";
            GUIBits.Log2(r);
            return r;
        }  // makepolys
#else
        public static void makepolys() { Debug.Log("makepolys not used, pregenerated."); }

#endif


        }    // class CSGPrim
    }   // namespace CSG
